module.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){t.exports=require("base58check")},function(t,e){t.exports=require("safe-buffer")},function(t,e){t.exports=require("coinselect")},function(t,e){t.exports=require("bitcoin-core")},function(t,e){t.exports=require("bitcoinjs-lib")},function(t,e,n){const r=n(4),i=n(3),s=n(2),{Buffer:o}=n(1),c=n(0);t.exports={Utils:class{constructor(t){this.network="mainnet"===t?r.networks.bitcoin:r.networks.testnet}generateAccount(){const t=new r.ECPair.makeRandom({network:this.network});return{privateKey:t.toWIF(),publicKey:t.Q.getEncoded().toString("hex"),address:t.getAddress()}}createMultisigAddress(t,e){const n=e.map(t=>o.from(t,"hex")),i=r.script.multisig.output.encode(t,n,this.network),s=r.script.scriptHash.output.encode(r.crypto.hash160(i),this.network);return{address:r.address.fromOutputScript(s,this.network),accountExtrsInfo:{redeemScript:i}}}isValidAddress(t){try{const e=c.decode(t).prefix.toString("hex"),n="6f"===e||"c4"===e?r.networks.testnet:r.networks.bitcoin;return this.network===n}catch(t){return!1}}signTransaction(t,e,n){const i=e.privateKey,s=r.TransactionBuilder.fromTransaction(r.Transaction.fromHex(t.txhex),this.network),c=r.ECPair.fromWIF(i,this.network);for(let e=0;e<t.input.length;e++){const r=o.from(n[t.input[e]],"hex");s.sign(e,c,r)}const a=s.inputs.map(t=>t.signatures),u=[];for(let t=0;t<a.length;t++){let e={},n=a[t].filter(t=>Boolean(t))[0];e[String(a[t].indexOf(n))]=n.toString("hex"),u.push(e)}return u}buildSignatures(t){let e=[];for(let n=0;n<t.length;n++)for(let r=0;r<t[0].length;r++){e[r]=e[r]||[];let i=Object.keys(t[n][r]);e[r][Number(i)]=t[n][r][i]}return e}buildTransaction(t,e,n){let i=this.buildSignatures(e),s=[];for(let c=0;c<e[0].length;c++){let e=t.input[c];s.push({redeemScript:o.from(n[e],"hex"),redeemScriptType:"multisig",pubKeys:r.script.multisig.output.decode(o.from(n[e],"hex")).pubKeys,signatures:i[c].map(t=>o.from(t,"hex")),signScript:o.from(n[t.input[c]],"hex"),signType:"multisig",prevOutScript:r.crypto.hash160(o.from(n[e],"hex")),prevOutType:"scripthash",witness:!1})}const c=r.TransactionBuilder.fromTransaction(r.Transaction.fromHex(t.txhex),this.network);return c.inputs=s,c.build().toHex()}getSpentTidsFromRawTransaction(t){let e=[];return r.Transaction.fromHex(t).ins.forEach((t,n)=>{let r={txid:t.hash.reverse().toString("hex")};e.push(r.txid)}),e}},Client:class{constructor(t,e,n,s,o){this.network="mainnet"===n?r.networks.bitcoin:r.networks.testnet,this.client=new i({username:t,password:e,network:n,port:s,host:o})}async getAddress(t,e){const n=await this.client.getRawTransaction(t);return(await this.client.decodeRawTransaction(n)).vout[e].scriptPubKey.addresses[0]}importPrivKeyToWallet(t,e){this.client.importPrivKey(t.privateKey,"",!1,e)}getUTXOs(t,e){this.client.listUnspent(0,(n,r)=>{if(n)return e(n);const i=r.sort((t,e)=>t.amount-e.amount).filter(e=>t.indexOf(e.txid)<0).map(t=>({txid:t.txid,vout:t.vout,value:Math.round(1e8*t.amount)}));e(null,i)})}createNewTransaction(t,e,n,i,o){let c=i||100,a={};this.getUTXOs(n,(n,i)=>{if(n)return o(n);let{inputs:u,outputs:l,fee:d}=s(i,e,c);if(!u||!l)return o("No inputs or outputs");let p=new r.TransactionBuilder(this.network);try{u.forEach(t=>p.addInput(t.txid,t.vout)),l.forEach(e=>{e.address||(e.address=t.address),p.addOutput(e.address,e.value)})}catch(t){return o(t.message)}a.txhex=p.buildIncomplete().toHex();let h=[];for(let t=0;t<u.length;t++)h.push(this.getAddress(u[t].txid,u[t].vout));Promise.all(h).then(t=>{a.txhex=p.buildIncomplete().toHex(),a.input=t,o(null,a)})})}sendRawTransaction(t,e){this.client.sendRawTransaction(t,e)}getTransactionStatus(t,e){this.client.getTransaction(t,e)}getTransactionHistory(t,e){this.client.listTransactions((n,r)=>{if(n)return e(n);const i=r.filter(e=>e.address===t);e(null,i)})}importAddress(t,e){this.client.importAddress(t,"",!1,e)}listSinceBlock(t,e){this.client.listSinceBlock(t,1,!0,e)}getTransactionsFromBlockHeight(t,e){this.client.getBlockchainInfo((n,r)=>{if(n)return e(n);this.client.getBlockHash(t,(t,n)=>{if(t)return e(t);this.client.listSinceBlock(n,1,!0,(t,n)=>{if(t)return e(t);const i=r.blocks;n.transactions.map(t=>{t.height=i-t.confirmations+1}),e(null,n)})})})}getCurrentHeight(t){this.client.getBlockchainInfo((e,n)=>{if(e)return t(e);t(null,n.blocks)})}}}},function(t,e,n){t.exports={bitcoin:n(5)}}]);