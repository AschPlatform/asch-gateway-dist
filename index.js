module.exports=function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=6)}([function(t,e){t.exports=require("base58check")},function(t,e){t.exports=require("safe-buffer")},function(t,e){t.exports=require("coinselect")},function(t,e){t.exports=require("bitcoin-core")},function(t,e){t.exports=require("bitcoinjs-lib")},function(t,e,r){const n=r(4),i=r(3),s=r(2),{Buffer:o}=r(1),c=r(0);t.exports=class{constructor(t,e,r,s,o){this.username=t,this.password=e,this.network="mainnet"===r?n.networks.bitcoin:n.networks.testnet,this.port=s,this.host=o,this.client=new i({username:t,password:e,network:r,port:s,host:o})}generateAccount(){const t=new n.ECPair.makeRandom({network:this.network});return{privateKey:t.toWIF(),publicKey:t.Q.getEncoded().toString("hex"),address:t.getAddress()}}createMultisigAddress(t,e){const r=e.map(t=>o.from(t,"hex")),i=n.script.multisig.output.encode(t,r,this.network),s=n.script.scriptHash.output.encode(n.crypto.hash160(i),this.network);return{address:n.address.fromOutputScript(s,this.network),accountExtrsInfo:{redeemScript:i}}}isValidAddress(t){try{const e=c.decode(t).prefix.toString("hex"),r="6f"===e||"c4"===e?n.networks.testnet:n.networks.bitcoin;return config.network===r}catch(t){return!1}}signTransaction(t,e,r){const i=e.privateKey,s=n.TransactionBuilder.fromTransaction(n.Transaction.fromHex(t.txhex),this.network),c=n.ECPair.fromWIF(i,this.network);for(let e=0;e<t.input.length;e++){const n=o.from(r[t.input[e]],"hex");s.sign(e,c,n)}const u=s.inputs.map(t=>t.signatures),a=[];for(let t=0;t<u.length;t++){let e={},r=u[t].filter(t=>Boolean(t))[0];e[String(u[t].indexOf(r))]=r.toString("hex"),a.push(e)}return a}buildSignatures(t){let e=[];for(let r=0;r<t.length;r++)for(let n=0;n<t[0].length;n++){e[n]=e[n]||[];let i=Object.keys(t[r][n]);e[n][Number(i)]=t[r][n][i]}return e}buildTransaction(t,e,r){let i=this.buildSignatures(e),s=[];for(let c=0;c<e[0].length;c++){let e=t.input[c];s.push({redeemScript:o.from(r[e],"hex"),redeemScriptType:"multisig",pubKeys:n.script.multisig.output.decode(o.from(r[e],"hex")).pubKeys,signatures:i[c].map(t=>o.from(t,"hex")),signScript:o.from(r[t.input[c]],"hex"),signType:"multisig",prevOutScript:n.crypto.hash160(o.from(r[e],"hex")),prevOutType:"scripthash",witness:!1})}const c=n.TransactionBuilder.fromTransaction(n.Transaction.fromHex(t.txhex),this.network);return c.inputs=s,c.build().toHex()}async getAddress(t,e){const r=await this.client.getRawTransaction(t);return(await this.client.decodeRawTransaction(r)).vout[e].scriptPubKey.addresses[0]}importPrivKeyToWallet(t,e){this.client.importPrivKey(t.privateKey,"",!1,e)}getUTXOs(t,e){this.client.listUnspent(0,(r,n)=>{if(r)return e(r);const i=n.sort((t,e)=>t.amount-e.amount).filter(e=>t.indexOf(e.txid)<0).map(t=>({txid:t.txid,vout:t.vout,value:Math.round(1e8*t.amount)}));e(null,i)})}createNewTransaction(t,e,r,i,o){let c=i||100,u={};this.getUTXOs(r,(r,i)=>{if(r)return o(r);let{inputs:a,outputs:l,fee:p}=s(i,e,c);if(!a||!l)return o("No inputs or outputs");let d=new n.TransactionBuilder(this.network);try{a.forEach(t=>d.addInput(t.txid,t.vout)),l.forEach(e=>{e.address||(e.address=t.address),d.addOutput(e.address,e.value)})}catch(t){return o(t.message)}u.txhex=d.buildIncomplete().toHex();let h=[];for(let t=0;t<a.length;t++)h.push(this.getAddress(a[t].txid,a[t].vout));Promise.all(h).then(t=>{u.txhex=d.buildIncomplete().toHex(),u.input=t,o(null,u)})})}sendRawTransaction(t,e){this.client.sendRawTransaction(t,e)}getTransactionStatus(t,e){this.client.getTransaction(t,e)}getTransactionHistory(t,e){this.client.listTransactions((r,n)=>{if(r)return e(r);const i=n.filter(e=>e.address===t);e(null,i)})}importAddress(t,e){this.client.importAddress(t,"",!1,e)}listSinceBlock(t,e){this.client.listSinceBlock(t,1,!0,e)}getTransactionsFromBlockHeight(t,e){this.client.getBlockchainInfo((r,n)=>{if(r)return e(r);this.client.getBlockHash(t,(t,r)=>{if(t)return e(t);this.client.listSinceBlock(r,1,!0,(t,r)=>{if(t)return e(t);const i=n.blocks;r.transactions.map(t=>{t.height=i-t.confirmations+1}),e(null,r)})})})}getCurrentHeight(t){this.client.getBlockchainInfo((e,r)=>{if(e)return t(e);t(null,r.blocks)})}}},function(t,e,r){t.exports={bitcoin:r(5)}}]);